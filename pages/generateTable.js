import { useState , useEffect } from 'react'

import axios from 'axios'

import Head from 'next/head'
import styles from '../styles/Home.module.css'
import stylesTrust from '../styles/Trust.module.css'

import fs from 'fs'
import {X509Certificate} from 'crypto'
import path from 'path'
import Pagination from '../components/paginationTrust'
import { paginate } from './paginate'

const Tablemodels = ({data}) => {

    const [posts, setPosts] = useState([])
    useEffect(() =>{
        const getPosts = async () =>{
            //const {data: res} = await axios.get('https://jsonplaceholder.typicode.com/posts')
            setPosts(data)
        }
        getPosts()
    },[])

    //console.log(posts.length)

    const [currentPage,  setCurrentPage] = useState(1);
    const pageSize = 10
    const handlePageChange = (page) => {
        setCurrentPage(page)
    }
    //console.log(useState(1))
    //console.log(currentPage)
    
    const PaginatePosts = paginate(posts, currentPage, pageSize)

    return (
        <div className={styles.container} >
            <Head>
                <title>Trust Store Mozilla</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}> 
                <table className='table'>
                    <thead>
                        <tr>
                            <th className={stylesTrust.col_1}>ID</th>
                            <th className={stylesTrust.col_1}>Nro de Serial</th>
                            <th className={stylesTrust.col_1}>Nombres<p className={stylesTrust._p}>Subject-Issuer</p></th>
                            <th className={stylesTrust.col_1}>Validez<p className={stylesTrust._p}>Desde-Hasta</p></th>
                            <th className={stylesTrust.col_1}>Llave pública<p className={stylesTrust._p}>Algoritmo-Tamaño</p></th>
                            <th className={stylesTrust.col_1}>Uso de la llave</th>
                            <th className={stylesTrust.col_1}>OID</th>
                            <th className={stylesTrust.col_1}>SHA-1</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            PaginatePosts.map((post) => 
                            (
                                <tr key={post.id}>
                                    <td className={stylesTrust.col_2}>{post.id}</td>
                                    <td className={stylesTrust.col_2}>{post.nmSerial}</td>
                                    <td className={stylesTrust.col_2}>{post.subject} - {post.issuer}</td>
                                    <td className={stylesTrust.col_2}>{post.validFrom} - {post.validTo}</td>
                                    <td className={stylesTrust.col_2}>{post.asymKey} - {post.nmBits} <p className={stylesTrust._p}>{post.typeKey}</p></td>
                                    <td className={stylesTrust.col_2}>{post.usePublicKey}</td>
                                    <td className={stylesTrust.col_2}>{post.oidPublicKey}</td>
                                    <td className={stylesTrust.col_2}>{post.certSha}</td>                            
                                </tr>        
                            ))
                        }
                        
                    </tbody>
                </table>
                <Pagination items = {posts.length} pageSize = {pageSize} currentPage = {currentPage}  onPageChange = {handlePageChange}/>
            </main>
        

            <footer className={styles.footer}>
            Grupo@4 Unidos
            </footer>

        </div>
    );
};

//se cambio el getstaticprops por getServerSideProps para recibir parametros
export const getServerSideProps = async (context) => {

    console.log(context.query)

    const postsDirectory = path.join(process.cwd(),'public', 'trustStore', context.query.contentPEM)
    let filenames = await fs.readFileSync(postsDirectory)
    let certificateCiphered = []

    const jsonDirectory = path.join(process.cwd(),'pages', 'data','oid.json')
    const fileJson = await fs.readFileSync(jsonDirectory)
    const oidObject = JSON.parse(fileJson);
    
    
    filenames.toString().split(/\n-----END CERTIFICATE-----/).forEach(function(certificate){
    // do something here with each line
        const certificateCipher = certificate + "\n-----END CERTIFICATE-----"
        if(certificateCipher != "\n-----END CERTIFICATE-----")
            certificateCiphered.push(certificateCipher);
    });
    
    let x509list = ""
    let result = ""
    let typePublickey = ""
    let asymmetricKey = ""
    
    let id = 0

    const data = certificateCiphered.map(async (cert) => {
        
        // read X509 CERTIFICATE
        x509list = new X509Certificate(cert)
        //console.log(x509list.publicKey.asymmetricKeyDetails)
        typePublickey = x509list.publicKey.type
        asymmetricKey = x509list.publicKey.asymmetricKeyType

        //x509 to object
        result = x509list.toLegacyObject()

        // read subject's data
        const inToremove = "O="
        const listNameSubject = result.subject
        let nameSubject = ""
        listNameSubject.split(/\n/).forEach(function(listname){
            
            if (listname.includes(inToremove)) {
                nameSubject = listname.replaceAll(inToremove, "");
            }
        });

        // read issuer's data
        const listNameIssuer = result.issuer
        
        let nameIssuer = ""
        listNameIssuer.split(/\n/).forEach(function(listname){
            if (listname.includes(inToremove)) {
                nameIssuer = listname.replaceAll(inToremove, "");
            }
        });

        //compare asymmetric key for return OIDs
        let useKey = ""
        let oidKey = ""
        oidObject.map(async (oid) =>{

            if(asymmetricKey.toUpperCase() == oid.Algorithm){
                useKey = oid.Type
                oidKey = oid.OID
            }
        })
        //console.log(useKey)
        //console.log(oidKey)

        //console.log(nameIssuer)
        id++
        return {
            id: id,
            subject: nameSubject,
            issuer: nameIssuer,
            nmSerial: result.serialNumber,
            validFrom: result.valid_from,
            validTo: result.valid_to,
            certSha: result.fingerprint,
            asymKey: asymmetricKey,
            usePublicKey: useKey,
            oidPublicKey: oidKey,
            nmBits: result.bits,
            typeKey: typePublickey,
            pubKey: toString(result.pubkey),
        }
        //certificateDeciphered.push(result)
    });
    return {
        props: {
            data: await Promise.all(data),
        },
    }

};


export default Tablemodels;