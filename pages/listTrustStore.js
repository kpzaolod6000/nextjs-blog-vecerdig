import Head from 'next/head'
import styles from '../styles/Home.module.css'
import stylesTrust from '../styles/Trust.module.css'
import fs from 'fs'
import {X509Certificate} from 'crypto'
import path from 'path'

function Readpem({ data }) {
    //console.log("nada onichan:",data);
    // console.log(data.map(({subject})=> {console.log(subject)}))
    return (
        <div className={styles.container} >
            <Head>
                <title>Trust Store Mozilla</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}> 
                <h1 className={stylesTrust.browser__trust}> Mozilla Trust Store Certificates</h1>
                <div className={stylesTrust.table__browser}>
                    <ul>
                        <li className={`${stylesTrust.table__browser__header} ${stylesTrust._li}`}>
                            <div className={stylesTrust.col_1}>Nro de Serial</div>
                            <div className={stylesTrust.col_1}>Nombre</div>
                            <div className={stylesTrust.col_1}>Validez<p className={stylesTrust._p}>Desde-Hasta</p></div>
                            <div className={stylesTrust.col_1}>Llave pública<p className={stylesTrust._p}>Algoritmo-Tamaño</p></div>
                            <div className={stylesTrust.col_1}>SHA-1</div>
                        </li>

                    {   
                        data.map(({id,subject,nmSerial,validFrom,validTo,certSha,nmBits,pubKey}) => 
                        (
                            <li className={`${stylesTrust.table__browser__row} ${stylesTrust._li}`} key={id}>
                                <div className={stylesTrust.col_2}>{nmSerial}</div>
                                <div className={stylesTrust.col_2}>{subject}</div>
                                <div className={stylesTrust.col_2}>{validFrom} - {validTo}</div>
                                <div className={stylesTrust.col_2}>RSA - {nmBits}</div>
                                <div className={stylesTrust.col_2}>{certSha}</div>
                                {/* <div className={stylesTrust.col_2}>{pubKey}</div> */}
                            </li>
                        ))
                    }
                    </ul>
                </div>
            </main>
        

            <footer className={styles.footer}>
            Grupo@4 Unidos
            </footer>

        </div>

    )
}

export const getStaticProps = async () => {
    const postsDirectory = path.join(process.cwd(),'public', 'trustStore','MozillaRootsPEM.txt')
    // const filenames = await fs.readFileSync(postsDirectory)
    let filenames = await fs.readFileSync(postsDirectory)
    let certificateCiphered = []

    filenames.toString().split(/\n-----END CERTIFICATE-----/).forEach(function(certificate){
    // do something here with each line
        const certificateCipher = certificate + "\n-----END CERTIFICATE-----"
        if(certificateCipher != "\n-----END CERTIFICATE-----")
            certificateCiphered.push(certificateCipher);
    });
    
    let x509list = ""
    let result = ""
    // let certificateDeciphered = []
    
    let id = 0

    const data = certificateCiphered.map(async (cert) => {
        // console.log(cert)
        x509list = new X509Certificate(cert);
        result = x509list.toLegacyObject()
        //console.log(result)
        const listNameCert = result.subject
        //console.log(ggg)
        //console.log((ggg.split(/\n/)))
        let nameCert = ""
        listNameCert.split(/\n/).forEach(function(listname){
            const inToremove = "O="
            if (listname.includes(inToremove)) {
                nameCert = listname.replaceAll(inToremove, "");
            }
        });

        //console.log(nameCert)
        id++
        return {
            id: id,
            subject: nameCert,
            nmSerial: result.serialNumber,
            validFrom: result.valid_from,
            validTo: result.valid_to,
            certSha: result.fingerprint,
            nmBits: result.bits,
            pubKey: toString(result.pubkey),
        }
        //certificateDeciphered.push(result)
    });
    return {
        props: {
            data: await Promise.all(data),
        },
    }

};

export default Readpem